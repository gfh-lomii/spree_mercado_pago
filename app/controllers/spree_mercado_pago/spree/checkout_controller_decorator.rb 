debugger
module SpreeMercadoPago
  module Spree
    module CheckoutControllerDecorator
      def self.prepended(base)
        base.before_action :mercadopago_checkout, only: %i[update]
      end

      def mercadopago_checkout
        puts ">>>>> pay_with_mercadopago on update"
        if @order.update_from_params(params, permitted_checkout_attributes, request.headers.env)
          @order.temporary_address = !params[:save_user_address]
          if @order.state == 'payment'
            pm_id = params["order[payments_attributes][][payment_method_id]"] || params[:method]
            payment_method = Spree::PaymentMethod.find(pm_id)
            if payment_method && payment_method.kind_of?(Spree::PaymentMethod::MercadoPago)
              # pay with mercadopago
              payment_response = MercadoPagoCheckout.call(@order.id, params[:mercadopago])
              if payment_response.dig(:status) == "approved"
                @order.skip_stock_validation = true
                ix = 0
                while !@order.completed? && ix < 5
                  @order.next!
                  ix += 1
                end

                redirect_to(completion_route) && return
              else
                puts ">>>>> payment message: #{@order.errors.full_messages.join("\n")}"
                flash[:error] = @order.errors.full_messages.join("\n")
                redirect_to(checkout_state_path(@order.state)) && return
              end
            end
          end
        end
      end
    end
  end
end

Spree::CheckoutController.prepend SpreeMercadoPago::Spree::CheckoutControllerDecorator
